{"version":3,"sources":["images/blank.png","images/blue.png","images/Green.png","images/orange.png","images/purple-candy.png","images/red-candy.png","images/yellow-candy.png","components/ScoreBoard.js","components/Database.js","App.js","index.js"],"names":["ScoreBoard","props","className","score","Database","useState","User","Score","inpData","setinpData","console","log","type","onChange","e","target","value","candyColors","redCandy","blueCandy","purpleCandy","orangeCandy","greenCandy","yellowCandy","App","currentColorArrangement","setCurrentColorArrangement","squareBeingDragged","setSquareBeingDragged","squareBeingReplaced","setSquareBeingReplaced","scoreDislpay","setScoreDislpay","checkForColumnOfFour","i","colummnOfFour","width","decidedColor","isBlank","blank","every","square","forEach","checkForRowOfFour","RowOfFour","includes","checkForColumnOfThree","colummnOfThree","checkForRowOfThree","RowOfThree","dragStart","dragDrop","dragEnd","squareBeingDraggedId","parseInt","getAttribute","squareBeingReplacedId","validMove","isACoulumnOfFour","isARowOfFour","isACoulumnOfThree","isARowOfThree","useEffect","randomColorArrangement","randomColor","Math","floor","random","length","push","createBoard","timer","setInterval","randomNumber","moveIntoSquareBelow","clearInterval","map","candyColor","index","src","alt","draggable","onDragStart","onDragOver","preventDefault","onDragEnter","onDragLeave","onDrop","onDragEnd","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc64f607.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/blank.fbcb9179.png\";","export default __webpack_public_path__ + \"static/media/blue.73120c15.png\";","export default __webpack_public_path__ + \"static/media/Green.599f7016.png\";","export default __webpack_public_path__ + \"static/media/orange.f106b2cd.png\";","export default __webpack_public_path__ + \"static/media/purple-candy.ae25b8a5.png\";","export default __webpack_public_path__ + \"static/media/red-candy.3658b37c.png\";","export default __webpack_public_path__ + \"static/media/yellow-candy.a3d87a9b.png\";","import React from 'react'\r\n\r\nconst ScoreBoard = (props) => {\r\n  return (\r\n    <div className=\"score-board\">\r\n      <h2>{props.score}</h2>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ScoreBoard\r\n","import React, { useState, useEffect } from 'react'\r\n\r\n\r\nconst Database = () => {\r\n\r\n  const [DATA, setDATA] = useState({\r\n    User: \"ARNAV\",\r\n    Score: 45\r\n  })\r\n\r\n  const [inpData, setinpData] = useState(\"\")\r\n\r\n\r\n  return (\r\n    <div>\r\n      {console.log(inpData)}\r\n      <input type=\"text\" onChange={e => setinpData(e.target.value)} />\r\n      <button>Submit Score</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Database\r\n","//importing hooks\nimport { useState, useEffect } from \"react\"\n//importing images\nimport blank from './images/blank.png'\nimport blueCandy from './images/blue.png'\nimport greenCandy from './images/Green.png'\nimport orangeCandy from './images/orange.png'\nimport purpleCandy from './images/purple-candy.png'\nimport redCandy from './images/red-candy.png'\nimport yellowCandy from './images/yellow-candy.png'\n//components\nimport ScoreBoard from \"./components/ScoreBoard\"\nimport Database from \"./components/Database\"\n\n\n\nconst width = 8\nconst candyColors = [redCandy, blueCandy, purpleCandy, orangeCandy, greenCandy, yellowCandy]\n\n\nfunction App() {\n  const [currentColorArrangement, setCurrentColorArrangement] = useState([])\n  const [squareBeingDragged, setSquareBeingDragged] = useState()\n  const [squareBeingReplaced, setSquareBeingReplaced] = useState()\n  const [scoreDislpay, setScoreDislpay] = useState(0)\n\n\n  const createBoard = () => {\n    const randomColorArrangement = []\n    for (let i = 0; i < width * width; i++) {\n      const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)]\n      randomColorArrangement.push(randomColor)\n    }\n    setCurrentColorArrangement(randomColorArrangement)\n  }\n  const checkForColumnOfFour = () => {\n    for (let i = 0; i <= 39; i++) {\n      const colummnOfFour = [i, i + width, i + width * 2, i + width * 3]\n      const decidedColor = currentColorArrangement[i]\n\n      const isBlank = currentColorArrangement[i] === blank\n\n      if (colummnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDislpay((score) => score + 4)\n        colummnOfFour.forEach(square => currentColorArrangement[square] = blank)\n        return true\n\n      }\n    }\n  }\n  const checkForRowOfFour = () => {\n    for (let i = 0; i < 64; i++) {\n      const RowOfFour = [i, i + 1, i + 2, i + 3]\n      const decidedColor = currentColorArrangement[i]\n      const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64]\n      const isBlank = currentColorArrangement[i] === blank\n\n      if (notValid.includes(i)) continue\n\n      if (RowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDislpay((score) => score + 4)\n        RowOfFour.forEach(square => currentColorArrangement[square] = blank)\n        return true\n\n      }\n    }\n  }\n  const checkForColumnOfThree = () => {\n    for (let i = 0; i <= 47; i++) {\n      const colummnOfThree = [i, i + width, i + width * 2]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n\n\n      if (colummnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDislpay((score) => score + 3)\n        colummnOfThree.forEach(square => currentColorArrangement[square] = blank)\n        return true\n\n      }\n    }\n  }\n  const checkForRowOfThree = () => {\n    for (let i = 0; i < 64; i++) {\n      const RowOfThree = [i, i + 1, i + 2]\n      const decidedColor = currentColorArrangement[i]\n      const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64]\n      const isBlank = currentColorArrangement[i] === blank\n\n      if (notValid.includes(i)) continue\n\n      if (RowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDislpay((score) => score + 3)\n        RowOfThree.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n\n  const moveIntoSquareBelow = () => {\n    for (let i = 0; i < 64 - width; i++) {\n      const firstRow = [0, 1, 2, 3, 4, 5, 6, 7]\n      const isFirstRow = firstRow.includes(i)\n      if (isFirstRow && currentColorArrangement[i] === blank) {\n        let randomNumber = Math.floor(Math.random() * candyColors.length)\n        currentColorArrangement[i] = candyColors[randomNumber]\n      }\n      if ((currentColorArrangement[i + width]) === blank) {\n        currentColorArrangement[i + width] = currentColorArrangement[i]\n        currentColorArrangement[i] = blank\n      }\n    }\n  }\n\n  const dragStart = (e) => {\n    setSquareBeingDragged(e.target)\n  }\n  const dragDrop = (e) => {\n    setSquareBeingReplaced(e.target)\n  }\n  const dragEnd = (e) => {\n    const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute(\"data-id\"))\n    const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'))\n\n    currentColorArrangement[squareBeingReplacedId] = squareBeingDragged.getAttribute('src')\n    currentColorArrangement[squareBeingDraggedId] = squareBeingReplaced.getAttribute('src')\n\n    const validMoves = [\n      squareBeingDraggedId - 1,\n      squareBeingDragged - width,\n      squareBeingDraggedId + 1,\n      squareBeingDragged + width,\n    ]\n\n    const validMove = validMoves.includes(squareBeingReplacedId)\n    const isACoulumnOfFour = checkForColumnOfFour()\n    const isARowOfFour = checkForRowOfFour()\n    const isACoulumnOfThree = checkForColumnOfThree()\n    const isARowOfThree = checkForRowOfThree()\n\n    if (squareBeingReplacedId && validMove && (isACoulumnOfFour || isACoulumnOfThree || isARowOfFour || isARowOfThree)) {\n      setSquareBeingDragged(null)\n      setSquareBeingReplaced(null)\n    }\n    else {\n      currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute('src')\n      currentColorArrangement[squareBeingDraggedId] = squareBeingDragged.getAttribute('src')\n      setCurrentColorArrangement([...currentColorArrangement])\n    }\n\n\n  }\n\n\n  useEffect(() => {\n    createBoard()\n  }, [])\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      checkForColumnOfFour()\n      checkForRowOfFour()\n      checkForColumnOfThree()\n      checkForRowOfThree()\n      moveIntoSquareBelow()\n      setCurrentColorArrangement([...currentColorArrangement])\n    }, 100)\n    return () => clearInterval(timer)\n  }, [checkForColumnOfFour, checkForRowOfFour, currentColorArrangement, checkForRowOfThree, checkForColumnOfThree,])\n\n  return (\n    <div className=\"app\">\n      <div className=\"game\">\n        {currentColorArrangement.map((candyColor, index) => (\n          <img\n            key={index}\n            // style={{ backgroundColor: candyColor }}\n            src={candyColor}\n            alt={candyColor}\n            data-id={index}\n            draggable={true}\n            onDragStart={dragStart}\n            onDragOver={(e) => e.preventDefault()}\n            onDragEnter={(e) => e.preventDefault()}\n            onDragLeave={(e) => e.preventDefault()}\n            onDrop={dragDrop}\n            onDragEnd={dragEnd}\n          />\n        ))}\n      </div>\n      <ScoreBoard score={scoreDislpay} />\n      <Database></Database>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}